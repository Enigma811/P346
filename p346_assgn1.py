# -*- coding: utf-8 -*-
"""P346 Assgn1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1h-C9zXRe_U5wN_QU71D7oToucTJARBE_
"""

#Q1

# Sum of N odd numbers
def sum_odd(n):
  sum = 0
  for i in range(0,n):
    p = 2*i + 1
    sum = sum + p
  return(sum)


#Factorial of N
def fact(n):
  if type(n) != int:
    return "Enter a non negative integer input"
  else:
    print()
  p = 1
  fact = 1
  for i in range(0,n):
    fact = fact*p
    p = p + 1
  return(fact)


print("Example: Sum of first 3 odd terms")
print(sum_odd(3)) #Dummy Inputs : Change inputs here
print()
print("Example: Factorial of 5")
print(fact(5)) #Dummy Inputs : Change inputs here

#Q2

#AP of N numbers
def sum_ap(n, ini, cd):
  nt = ini
  ap = 0
  for i in range(0,n):
    ap = ap + nt
    nt = nt + cd
  return(ap)


#GP of N numbers
def sum_gp(n, ini, cr):
  nt = ini
  gp = 0
  for i in range(0,n):
    gp = gp + nt
    nt = nt*cr
  return(gp)


#HP of N numbers

def sum_hp(n, ini, cd):
  nt = ini
  hp = 0
  for i in range(0,n):
    hp = hp + nt
    nt = 1/((1/nt) + cd)
  return(hp)


print("Example: Sum of terms in AP")
print(sum_ap(3, 2, 1.5)) #Dummy Inputs : Change inputs here
print()
print("Example: Sum of terms in GP")
print(sum_gp(3, 4.34, 0.5)) #Dummy Inputs : Change inputs here
print()
print("Example: Sum of terms in HP")
print(sum_hp(4, 1, 1.5)) #Dummy Inputs : Change inputs here

#Q3

import matplotlib.pyplot as plt

#sum of first n terms of series
def sum_series(n):
  sum = 0
  for i in range(1,n+1):
    nt = ((-1)**(i + 1))/(2**i)
    sum = sum + nt
  return(sum)

#plot of series sum vs n upto first n terms
def plot_seriessum(n):
  x = [0] * n
  y = [0] * n
  sum = 0
  for i in range(1,n+1):
    nt = ((-1)**(i + 1))/(2**i)
    x[i-1] = i
    sum = sum + nt
    y[i-1] = nt
  
  plt.plot(x,y)
  plt.xlabel("n")
  plt.ylabel("Sum of first n terms")
  plt.title("Sum of series vs n")
  plt.show()
#def plt_series(n):

print("Example: Sum of first N terms of given series")
print(sum_series(200)) #Dummy Inputs : Change inputs here
print()
plot_seriessum(20)

#Q4

#transpose of a matrix
def trans(x):
  y = [0] * len(x[0])
  for k in range(0,len(x[0])): y[k] = [0] * len(x)
  for i in range(0, len(x[0])):
    for j in range(0, len(x)):
      y[i][j] = x[j][i]
  return(y)

#dot product - 2 column vectors
def dotpr_col(x,y):
  if len(x) & len(y):
    if len(x) == len(y):
      sum = 0
      for i in range(0, len(y)):
        sum = sum + ((x[i][0])*(y[i][0]))
      return(sum)
    else:
      print("Product undefined - Incorrect # vector components")
  else:
    print("Invalid Inputs")


#two-matrix product
def mat_prod(x,y): #for XY
  if len(x[0]) != len(y):
    print("Product not defined: Incorrect matrix order")
  else:
    #dynamic creation of blank product matrix 
    val = [0] * len(x)
    for x in range (len(x)): val[x] = [0] * len(y[0])

    p = [0] * len(y)
    q = [0] * len(y)
    m = trans(x)
    for i in range(0, len(val)):
            
      for j in range (0, len(val[0])):
        for k in range(0, len(y)):
          t1 = y[k][j]
          t2 = m[k][i]
          q[k] = [t1]
          p[k] = [t2]
          # print(x[i][r])
          # p = x[i]
          #sum = sum + (x[i][print(k)])*(y[print(k)][j])
        prm(q)
        val[i][j] = dotpr_col(p,q)

    return(val)


#printing matrix
def prm(x):
  for i in range(0, len(x)):
    print(x[i])
    print()


A = [[2,-3,1.4],[2.5,1,-2],[-0.8,0,3.1]]  #Dummy Inputs : Change inputs here
B = [[0,-1,1],[1.5,0.5,-2],[3,0,-2]]      #Dummy Inputs : Change inputs here
C = [[-2],[0.5],[1.5]]                    #Dummy Inputs : Change inputs here
D = [[1],[0],[-1]]                        #Dummy Inputs : Change inputs here

print("Example: D.C")
print(dotpr_col(D,C))
print()
print("Example: AB")
prm(mat_prod(A,B))
print()
print("Example: BC")
prm(mat_prod(B,C))
print()

#Q5

class myComplex:
  def __init__(self, re, im):
    self.real = re
    self.im = im
  
  def prnt(self):
    if self.im >= 0:
      print(self.real, "+", self.im,"i")
    else:
      print(self.real, "-", abs(self.im),"i")

def csum(x,y):
  p = x.real + y.real
  q = x.im + y.im
  sum = myComplex(p, q)
  return(sum)
  
def cprod(x,y):
  p = ((x.real)*(y.real)) - ((x.im)*(y.im))
  q = ((x.real)*(y.im)) + ((x.im)*(y.real))
  pr = myComplex(p, q)
  return(pr)

def cmod(x):
  m = ((x.real)**2) + ((x.im)**2)
  return(m)

a = myComplex(3, -2)
b = myComplex(1, 2)

c = csum(a, b)
print("Sum")
c.prnt()
print()

c = cprod(a, b)
print("Product")
c.prnt()
print()

print("Modulus of",end=" ")
a.prnt()
print(cmod(a))
print()
print("Modulus of",end=" ")
b.prnt()
print(cmod(b))

p = [0] * 4
b = 2
for i in range(0,4): p[i] = [b] * 3
print(p)

def trans(x):
  y = [0] * len(x[0])
  for k in range(0,len(x[0])): y[k] = [0] * len(x)
  for i in range(0, len(x[0])):
    for j in range(0, len(x)):
      y[i][j] = x[j][i]
  return(y)

prm(trans(C))